#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class CalendarGrammarBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(CalendarGrammarBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class CalendarGrammarParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=CalendarGrammarBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(CalendarGrammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._expr_()

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._init_()
                self._ownership_()
                self.name_last_node('calendar_owner')
                self._calendar_()
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._token('on')
                        with self._option():
                            self._token('for')
                        self._error('no available options')
                self._timeframe_()
                self.name_last_node('time_frame')
            with self._option():
                self._init_()
                self._ownership_()
                self.name_last_node('calendar_owner')
                self._timeframe_()
                self.name_last_node('time_frame')
            self._error('no available options')
        self.ast._define(
            ['calendar_owner', 'time_frame'],
            []
        )

    @tatsumasu()
    def _init_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('what')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('is')
                        with self._option():
                            self._token('am')
                        with self._option():
                            self._token('does')
                        with self._option():
                            self._token('do')
                        with self._option():
                            self._token('are')
                        self._error('no available options')
                with self._optional():
                    self._token('on')
            with self._option():
                self._token('how')
                self._token('busy')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('is')
                        with self._option():
                            self._token('am')
                        self._error('no available options')
            with self._option():
                self._token('tell')
                self._token('me')
                with self._optional():
                    self._token('about')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('add')
                        with self._option():
                            self._token('put')
                        with self._option():
                            self._token('create')
                        with self._option():
                            self._token('schedule')
                        self._error('no available options')
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._token('a')
                        with self._option():
                            self._token('an')
                        self._error('no available options')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('event')
                        with self._option():
                            self._token('appointment')
                        with self._option():
                            self._token('meeting')
                        self._error('no available options')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('to')
                        with self._option():
                            self._token('on')
                        self._error('no available options')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('add')
                        with self._option():
                            self._token('put')
                        with self._option():
                            self._token('create')
                        with self._option():
                            self._token('schedule')
                        self._error('no available options')
                self._token('something')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('to')
                        with self._option():
                            self._token('on')
                        self._error('no available options')
            self._error('no available options')

    @tatsumasu()
    def _ownership_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('me')
            with self._option():
                self._token('i')
            with self._option():
                self._token('my')
            self._error('no available options')

    @tatsumasu()
    def _day_of_week_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('sunday')
            with self._option():
                self._token('monday')
            with self._option():
                self._token('tuesday')
            with self._option():
                self._token('wednesday')
            with self._option():
                self._token('thursday')
            with self._option():
                self._token('friday')
            with self._option():
                self._token('saturday')
            self._error('no available options')

    @tatsumasu()
    def _month_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('january')
            with self._option():
                self._token('february')
            with self._option():
                self._token('march')
            with self._option():
                self._token('april')
            with self._option():
                self._token('may')
            with self._option():
                self._token('june')
            with self._option():
                self._token('july')
            with self._option():
                self._token('august')
            with self._option():
                self._token('september')
            with self._option():
                self._token('october')
            with self._option():
                self._token('november')
            with self._option():
                self._token('december')
            self._error('no available options')

    @tatsumasu()
    def _number_(self):  # noqa
        self._pattern('\\d+')

    @tatsumasu()
    def _date_(self):  # noqa
        self._number_()
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('st')
                with self._option():
                    self._token('nd')
                with self._option():
                    self._token('rd')
                with self._option():
                    self._token('th')
                self._error('no available options')

    @tatsumasu()
    def _time_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('day')
            with self._option():
                self._token('weekend')
            with self._option():
                self._token('week')
            with self._option():
                self._token('afternoon')
            with self._option():
                self._token('evening')
            with self._option():
                self._token('morning')
            with self._option():
                self._token('tomorrow')
            with self._option():
                self._token('today')
            with self._option():
                self._day_of_week_()
            with self._option():
                self._month_()
                with self._optional():
                    self._date_()
            self._error('no available options')

    @tatsumasu()
    def _calendar_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('calendar')
            with self._option():
                self._token('agenda')
            with self._option():
                self._token('schedule')
            with self._option():
                self._token('planner')
            with self._option():
                self._token('events')
            with self._option():
                self._token('up')
                self._token('to')
            with self._option():
                self._token('doing')
            with self._option():
                self._token('have')
                self._token('going')
            with self._option():
                self._time_()
            self._error('no available options')

    @tatsumasu()
    def _relative_modifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('next')
            with self._option():
                self._token('this')
            self._error('no available options')

    @tatsumasu()
    def _timeframe_(self):  # noqa
        with self._optional():
            self._relative_modifier_()
        self._time_()


class CalendarGrammarSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def init(self, ast):  # noqa
        return ast

    def ownership(self, ast):  # noqa
        return ast

    def day_of_week(self, ast):  # noqa
        return ast

    def month(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def date(self, ast):  # noqa
        return ast

    def time(self, ast):  # noqa
        return ast

    def calendar(self, ast):  # noqa
        return ast

    def relative_modifier(self, ast):  # noqa
        return ast

    def timeframe(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = CalendarGrammarParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, CalendarGrammarParser, name='CalendarGrammar')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
